{"version":3,"sources":["Stores/TodoModel.js","Stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/TodoFooter.js","App.js","reportWebVitals.js","index.js"],"names":["TodoModel","store","title","completed","id","this","makeObservable","observable","toggle","action","todoStore","todos","lastID","flag","addTodo","todosLeft","computed","printable","push","filter","todo","length","console","log","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","setState","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","onToggle","props","removeTodo","TodoStore","checked","onClick","observer","TodoItems","map","TodoFooter","document","getElementById","setAttribute","href","showAll","showActives","showCompleted","clearCompletedTodos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8a081584.chunk.js","sourcesContent":["\r\nimport {makeObservable , observable, action} from 'mobx'\r\n\r\nexport default class TodoModel {\r\n\r\n    store\r\n    id\r\n    title\r\n    completed\r\n\r\n    constructor(store, title, completed, id){\r\n        this.store = store\r\n        this.id = id\r\n        this.title = title\r\n        this.completed = completed\r\n\r\n        makeObservable(this, {\r\n            title: observable,\r\n            completed: observable,\r\n            toggle: action,\r\n        })\r\n    }\r\n\r\n\r\n    toggle() {\r\n        this.completed = !this.completed\r\n    }\r\n}","\r\nimport {makeObservable , observable, action, computed} from 'mobx'\r\n\r\nimport TodoModel from './TodoModel'\r\n\r\n\r\nclass TodoStore {\r\n    todos\r\n    lastID\r\n    flag\r\n\r\n    constructor() {\r\n\r\n        this.todos = []\r\n        this.lastID = 0\r\n        this.flag = 'all'\r\n\r\n\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            flag: observable,\r\n\r\n            addTodo: action,\r\n\r\n            todosLeft: computed,\r\n            printable: computed,\r\n        })\r\n    }\r\n\r\n    addTodo(title) {\r\n        this.todos.push(new TodoModel(this, title, false, this.lastID ++))\r\n    }\r\n\r\n    get todosLeft() {\r\n        return(this.todos.filter(todo => todo.completed === false).length)\r\n    }\r\n\r\n    get printable() {\r\n\r\n        if (this.flag === 'all'){\r\n            return(this.todos)\r\n        } else if (this.flag === 'active') {\r\n            return(this.todos.filter(todo => todo.completed === false))\r\n        } else if (this.flag === 'completed') {\r\n            return(this.todos.filter(todo => todo.completed === true))\r\n        } else {\r\n            console.log('Printable Error')\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nconst todoStore = new TodoStore()\r\nexport default todoStore","import React, { Component } from \"react\";\r\nimport todoStore from '../Stores/TodoStore'\r\n\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \"\"\r\n  }\r\n\r\n  handleKeyDown = event => {\r\n    if(event.keyCode !== 13){\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n    todoStore.addTodo(this.state.value)\r\n    this.setState({\r\n      value: ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todo</h1>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={event => this.setState({value: event.target.value})}\r\n          onKeyDown={\r\n            event => this.handleKeyDown(event)\r\n          }\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\n\r\nimport {observer} from 'mobx-react'\r\n\r\nimport TodoStore from '../Stores/TodoStore'\r\n\r\n\r\nclass TodoItem extends Component {\r\n\r\n  onToggle = () => {\r\n    this.props.todo.toggle()\r\n  }\r\n\r\n  removeTodo = () => {\r\n\r\n    TodoStore.todos = TodoStore.todos.filter(todo => todo !== this.props.todo)\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n      const { todo } = this.props\r\n    return (\r\n      <li className={todo.completed ? 'completed' : ' '}>\r\n        <div className=\"view\">\r\n          <input\r\n            onChange={this.onToggle}\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            value=\"on\"\r\n            checked={todo.completed} />\r\n          <label>{todo.title}</label>\r\n          <button className=\"destroy\" onClick={this.removeTodo}/>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem = observer(TodoItem)\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\n\r\nimport TodoItem from './TodoItem'\r\nimport todoStore from '../Stores/TodoStore'\r\n\r\nimport {observer} from 'mobx-react'\r\n\r\nclass TodoItems extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n\r\n            {\r\n                todoStore.printable.map(todo => {\r\n                    return(\r\n                        <TodoItem todo={todo}/>\r\n                    )\r\n                })\r\n            }\r\n            \r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItems = observer(TodoItems)\r\n\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\n\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../Stores/TodoStore\";\r\n\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass TodoFooter extends Component {\r\n\r\n  clearCompletedTodos() {\r\n    todoStore.todos = todoStore.todos.filter(todo => todo.completed === false)\r\n  }\r\n\r\n  showAll() {\r\n    document.getElementById(\"all\").setAttribute('class', 'selected')\r\n    document.getElementById(\"active\").setAttribute('class', '')\r\n    document.getElementById(\"completed\").setAttribute('class', '')\r\n\r\n    todoStore.flag = 'all'\r\n\r\n\r\n  }\r\n\r\n  showActives() {\r\n    document.getElementById(\"all\").setAttribute('class', '')\r\n    document.getElementById(\"active\").setAttribute('class', 'selected')\r\n    document.getElementById(\"completed\").setAttribute('class', '')\r\n\r\n    todoStore.flag = 'active'\r\n\r\n  }\r\n\r\n  showCompleted() {\r\n    document.getElementById(\"all\").setAttribute('class', '')\r\n    document.getElementById(\"active\").setAttribute('class', '')\r\n    document.getElementById(\"completed\").setAttribute('class', 'selected')\r\n\r\n\r\n    todoStore.flag = 'completed'\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n\r\n        if (todoStore.todos.length === 0) {\r\n            return(\r\n                <div></div>\r\n            )\r\n            \r\n        }\r\n        else {\r\n            return(\r\n                <footer className=\"footer\">\r\n                <span className=\"todo-count\">\r\n                  <strong>{todoStore.todosLeft}</strong> item left\r\n                </span>\r\n        \r\n                <ul className=\"filters\">\r\n                  <li>\r\n                    <a className=\"selected\" id=\"all\" href=\"#/\" onClick={this.showAll}>\r\n                      All\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"#/\" id=\"active\" onClick={this.showActives}>\r\n                      Active\r\n                      </a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"#/\" id=\"completed\" onClick={this.showCompleted}>\r\n                      Completed\r\n                      </a>\r\n                  </li>\r\n                </ul>\r\n        \r\n                <button className=\"clear-completed\"  onClick={this.clearCompletedTodos}>Clear completed</button>\r\n              </footer>\r\n            )\r\n        }\r\n\r\n  }\r\n}\r\n\r\nTodoFooter = observer(TodoFooter);\r\n\r\nexport default TodoFooter;\r\n","import { React, Component } from \"react\";\n\nimport { observer } from \"mobx-react\";\n\n\nimport \"./App.css\";\n\nimport TodoEntry from './components/TodoEntry'\nimport TodoItems from './components/TodoItems'\nimport TodoFooter from './components/TodoFooter'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"todoapp\" className=\"todoapp\">\n\n          <TodoEntry />\n\n          <TodoItems />\n\n          <TodoFooter />\n\n        </div>\n      </div>\n    );\n  }\n}\n\nApp = observer(App);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}